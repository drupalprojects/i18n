<?php
// $Id$

/**
 * @file
 * Internationalization (i18n) package - translattable strings
 * 
 * This (rewritten) module uses locale's tables to store source strings in the default language. The storage aims
 * to be forward compatible with Drupal 6 locale (with textgroups) and i18nstrings 6.x
 * 
 * The 'string id' is some context information about the string, has several parts separated by ':'
 * - textgroup, generic string group name (profile, content_type, etc..)
 * - object type, like 'field', 'type''
 * - object id
 * - property
 *   
 * @author Jose A. Reyero, 2007
 *
 */

/**
 * Implementation of hook_menu().
 */
function i18nstrings_menu($may_cache) {
  $items[] = array(
      'path' => 'admin/settings/i18n/strings',
      'type' => MENU_LOCAL_TASK,
      'title' => t('Strings'),
      'description' => t('Translatable strings.'),
      'callback' => 'i18nstrings_admin',
       'access' => user_access('administer site configuration'),
  );

  return $items;
}

/**
 * Menu callback. Administration page
 */
function i18nstrings_admin($op = NULL, $strid = NULL) {
  switch($op) {
    case 'edit':
      return drupal_get_form('i18nstrings_admin_form', $strid);
    default:
      return i18nstrings_admin_overview();
  }
}

/**
 * List of strings
 */
function i18nstrings_admin_overview() {
  $output = '';
  $header = array(t('String Id'), t('Default'), '');
  $result = db_query("SELECT DISTINCT(strid) FROM {i18n_strings} ORDER BY strid", i18n_default_language());
  $rows = array();
  while($str = db_fetch_object($result)) {
    $rows[] = array(
      $str->strid, 
      tt($str->strid), 
      l(t('edit'), 'admin/settings/i18n/strings/edit/'.$str->strid)
    );
  }
  $output .= theme('table', $header, $rows);
  return $output;
}

/**
 * Form callback: i18nstrings_admin_form
 */
function i18nstrings_admin_form($strid) {
  $strings = i18nstrings_load($strid);
  $form['strid'] = array('#type' => 'value', '#value' => $strid);
  $form['languages'] = array('#type' => 'fieldset', '#tree' => TRUE, '#title' => t('Translations'));

  // Approximate the number of rows in a textfield with a maximum of 10.
  $default = i18nstrings_get_string($strid, i18n_default_language());
  $rows = min(ceil(str_word_count($default) / 12), 10);
  
  foreach (i18n_supported_languages() as $language => $name) {
    $form['languages'][$language] = array(
      '#type' => 'textarea',
      '#rows' => $rows,
      '#title' => $name,
      '#default_value' => i18nstrings_get_string($strid, $language)
    );
  }
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  return $form;
}

/**
 * Form submit callback
 */
function i18nstrings_admin_form_submit($form_id, $form_values) {
  $strid = $form_values['strid'];
  foreach (i18n_supported_languages() as $language => $name) {
    i18nstrings_save_string($strid, $language, $form_values['languages'][$language]);
  }
  drupal_set_message(t('The strings have been updated'));
  return 'admin/settings/i18n/strings';
}

/**
 * Load string translations
 */
function i18nstrings_load($strid) {
  $strings = array();
  $result = db_query("SELECT * FROM {i18n_strings} WHERE strid = '%s'", $strid);
  while ($str = db_fetch_object($result)) {
    $strings[$str->locale] = $str->text;
  }
}

/**
 * Get string for a language
 */
function i18nstrings_get_string($strid, $language = FALSE, $refresh = FALSE) {
  static $strings = array();
  
  if ($refresh) {
    $language ? $strings[$language] = array() : $strings = array(); 
  }
  if (!isset($strings[$language][$strid])) {
    $translation = db_fetch_object(db_query("SELECT t.* FROM {locales_target} t INNER JOIN {locales_source} s ON t.lid = s.lid WHERE s.location = '%s' AND t.locale = '%s'", $strid, $language));
    $strings[$language][$strid] = $translation ? $translation->translation : FALSE;
  }

  return $strings[$language][$strid];
}

/**
 * Save string for a language
 * 
 * Locale's cache needs refreshing after calling this one. We don't do it here as
 * locale_refresh_cache() is a quite expensive operation.
 */
function i18nstrings_save_string($strid, $string) {
  drupal_set_message("DEBUG: i18n_strings_save: $strid($language)= $value");
  if ($source = i18nstrings_get_source($strid, $string)) {
    if ($source->location == $strid && $source->source == $string) {
      $source->clean = TRUE;
    } else {
      $source->clean = FALSE;
      $source->source = $string;
      $source->location = $strid;
    }
  } else {
    // String not stored, create a new one
    $source = new Stdclass();
    $sorce->source = $string;
    $source->location = $strid;
  }
  // Now save or update, depending on what we've found
  if (!$source->lid) {
    //dsm("Creating source string: $strid $string");
    db_query("INSERT INTO {locales_source} (location, source) VALUES ('%s', '%s')", $source->location, $source->source);
    $source->lid = db_result(db_query("SELECT lid FROM {locales_source} WHERE location = '%s' AND source = '%s'", $source->location, $source->source));
  } elseif (!$source->clean) {
    //dsm("Updating source string: $strid $string");
    db_query("UPDATE {locales_source} SET location = '%s', source = '%s' WHERE lid = %d", $source->location, $source->source, $source->lid);
  }
  return $source;
}

/**
 * Get source string from locale system
 * 
 * @param $strid
 *   String id
 * @param $string
 *   String in the default language
 */
function i18nstrings_get_source($strid, $string) {
  // First try with string id
  if ($source = db_fetch_object(db_query("SELECT * FROM {locales_source} WHERE location = '%s'", $strid))) {
    return $source;
  } 
  // Retry with the string itself
  elseif ($source = db_fetch_object(db_query("SELECT * FROM {locales_source} WHERE source = '%s'", $string))) {
    return $source;
  }
}

/**
 * Translate configurable string, and store for l10n client
 * 
 * @param $strid
 *   Textgroup and location glued with ':'
 *   I.e. profile:
 * @param $default
 *   String in default language. Default language may or may not be English
 * @param $langcode
 *   Optional language code if different from current request language
 * @param $update
 *   Whether to update/create the string
 */
function tt($strid, $default, $language = NULL, $update = FALSE) {
  global $locale, $l10n_client_strings;
  
  $language = $language ? $language : $locale;
  $string = NULL;
  
  if ($update) {
    i18nstrings_save_string($strid, $default);
  }
  if ($language == i18n_default_language()) {
    // We just translate from default language, not to default language
    return $default;
  } elseif ($translation = i18nstrings_get_string($strid, $language)) {
    $l10n_client_strings[$default] = $translation;
    return $translation;
  } else {
    $l10n_client_strings[$default] = TRUE;
    return $default;
  } 
}