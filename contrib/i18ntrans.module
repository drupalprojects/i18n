<?php
// $Id$

/**
 * @i18trans.module
 * This drupal module provides support for translate translatable variables 
 * as defined in $i18n_variables.
 * REQUIRE i18n.module
 * 
 * GPL as usual emanuele_quinto@yahoo.it    
 */

/**
 * Implementation of hook_help().
 */
function i18ntrans_help($section = 'admin/help#i18ntrans' ) {
  switch ($section) {
    case 'admin/help#i18ntrans' :
      $output = t('<p>This module provides support for translatable variables</p>');
      break;
    case 'admin/modules#description' :
      $output = t('Supports translatable variables. <b>Requires i18n and locale module</b>' );
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm().
 */
 // todo: set the permission
function i18ntrans_perm() {
  return array('i18n vars');
}

/**
 * Implementation of hook_access().
 */
function i18ntrans_access($op, $node) {
  global $user;
/*
  if ($op == 'update') {
    return user_access('i18n vars');
  }
*/
  return true;
}

/**
 * Implementation of hook_menu().
 */
// TODO:
function i18ntrans_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'admin/i18ntrans', 'title' => t('i18n Variable Translation'),
      'callback' => '_i18ntrans_page',
      'type' => MENU_CALLBACK,
      'access' => i18ntrans_access('update', NULL));
  }
  return $items;
}

/***
 * call back to generate the page.
 ***/
function _i18ntrans_page() {
  global $i18n_variables;
  global $conf;

/* Catching form request */
  if (!(is_null($_GET[variable]))) {
    $variable = $_GET[variable];
    array_shift($_GET); // shift q
    array_shift($_GET); // variable name (maybe could be stripped from the submit)
    foreach($_GET as $arr_keys => $val) {
      _i18ntrans_set($arr_keys, $conf, $val); //   
    }
  }

/***
 * For each translated variable we print a table
 *  from _i18n_get_lang() we know which is current language (says "fr")
 *  header -> name of variable (says "phptemplate_primary_links")
 *  row1   -> default value i.e. $conf["phptemplate_primary_links"]
 *  row2   -> translated value i.e. $conf["fr_phptemplate_primary_links"]
 ***/
  
  $content = "";
  foreach ($i18n_variables as $variable) {
    if( isset($conf["$variable"]) ) {
      $header = array(array('data' => "$variable", 'colspan' => '2'));
      $rows ="";
      $rows[] = array( "<b>DEF</b>" , _i18ntrans_html($conf["$variable"], $variable));
      $i18n_name = _i18n_get_lang() . '_'. $variable ;
// if local variable is not set we fill from default value
      if (! isset($conf[$i18n_name])) $conf["$i18n_name"] = $conf["$variable"];
// generate the form (html old style form)
      $form = "<form>";
      $form .= "<input name=\"variable\" type=\"hidden\" value=\"$i18n_name\">";
      $form .= _i18ntrans_form($conf["$i18n_name"],$i18n_name); //generate form
      $form .= "<input type=\"submit\" value=\"Submit\">";
      $form .= "</form>";

      $rows[] = array("<b>" . _i18n_get_lang() . "</b>", $form);
      $content .= theme('table', $header, $rows);;
    }
  }
  drupal_set_title("i18n variables");
  print theme('page', $content);
}

/***
 * Generate HTML from a variable (like print_r)
 * see http://wwww.php.net/manual/en/function.print-r.php#58811 
 ***/ 
function _i18ntrans_html($arr, $parent="", $indent=1) { 
  $output =  "\n<div class=\"array_tree\" id=\"array_tree_$indent\">\n";
  switch (gettype($arr)) { 
    case "array":
      foreach($arr as $key => $val) { 
        $output .= "<b>".htmlspecialchars($key)."</b>";
        $output .= "<div class=\"array_tree_element\" id=\"array_tree_element_$indent\" style=\"margin-left: 10px\">";
        $output .= _i18ntrans_html($val, "$parent,$key", $indent++);
        $output .= "</div>";
      }
      break;
    case "integer":
    case "double":
    case "boolean":
    case "string":
      $output .= "<code>" . htmlspecialchars($arr) . "</code><br />";
      break;
    default:
      $output .= "<b>($parent)</b> => ".gettype($val)."<br />";
      break; 
  }
  $output .= "</div>\n";
  return $output; 
}

/***
 * Generate a form from a variable (like print_r)
 * see http://wwww.php.net/manual/en/function.print-r.php#58811 
 ***/ 

function _i18ntrans_form($arr, $parent="", $indent=1) { 
  $output =  "\n<div class=\"array_tree\" id=\"array_tree_$indent\">\n";
  $row_maxlen = 40 - $indent;
  switch (gettype($arr)) { 
    case "array":
      foreach($arr as $key => $val) { 
        $output .= "<b>".htmlspecialchars($key)."</b>";
        $output .= "<div class=\"array_tree_element\" id=\"array_tree_element_$indent\" style=\"margin-left: 10px\">";
        $output .= _i18ntrans_form($val, "$parent,$key", $indent+1);
        $output .= "</div>";
      }
      break;
    case "integer":
    case "double":
    case "boolean":
      $output .= "<input name=\"$parent\" type=\"text\" value=\"". $arr . "\"><br />\n";
    case "string":
      $nrow = floor(strlen($arr) / $row_maxlen);
      if ($nrow>0) {
        $output .= "<textarea rows=\"" . floor($nrow*1.25) . "\" cols=\"$row_maxlen\" name=\"$parent\" >"  . htmlspecialchars($arr) . "</textarea><br/>";
      } else {
        $output .= "<input name=\"$parent\" type=\"text\" size=\"$row_maxlen\" value=\"". htmlspecialchars($arr) . "\"><br />\n";
      }
      break;
    default:
      $output .= "<b>($parent)</b> => ".gettype($val)."<br />";
      break; 
  }
  $output .= "</div>\n";
  return $output; 
}

function get_r($arr_keys, $arr_from="") {
  global $conf;
  if (is_string($arr_keys)) {
    $arr_keys = explode(",", $arr_keys);
    $var_name = array_shift($arr_keys);
    $arr_from = $conf[$var_name];
    return get_r($arr_keys, $arr_from);
  } else {
    $key_name = array_shift($arr_keys);
    if (is_null($key_name)) {
      return ">$arr_from<";
    } else {
      $arr_from = $arr_from["$key_name"];
      return get_r($arr_keys, $arr_from);
    }
  }
}

/***
 * Given
 *   a string: [en_phptemplate_primary_links,link,0] -> ($arr_keys)
 *   a pointer: $conf
 *   a value
 * the function set en_phptemplate_primary_links[link][0] to the value
 ***/
function _i18ntrans_set($arr_keys, &$arr_from, $value="") {
  global $conf;
  if (is_string($arr_keys)) {
    $arr_keys = explode(",", $arr_keys);
    $var_name = array_shift($arr_keys);
    $arr_from =& $conf[$var_name];
    _i18ntrans_set($arr_keys, $arr_from, $value);
  } else {
    $key_name = array_shift($arr_keys);
    if( (count($arr_keys)) == 1 ) {
      $arr_from =& $arr_from["$key_name"];
      _i18ntrans_set($arr_keys, $arr_from, $value);
    } else {
      $arr_from["$key_name"] = $value;
      return;
    }
  }
  return;
}

?>
